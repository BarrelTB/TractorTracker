@using Microsoft.AspNetCore.Mvc.Rendering
@inject IHtmlHelper<EquipmentViewModel> Html

@model TractorTracker.Web.Models.EquipmentViewModel

<div>
    @Html.HiddenFor(m => m.Id)
    <div id="generalEquipment" class="card equipment-card">
        <h3 class="card-title">@Model.Name</h3>
        <ul>
            <li>@Html.LabelFor(m => m.Type) @Model.Type</li>
            <li>@Html.LabelFor(m => m.SerialNumber) @Model.SerialNumber</li>
            <li>@Html.LabelFor(m => m.Description) @Model.Description</li>
        </ul>
    </div>

    @await Html.PartialAsync("Generics/CreateModal.cshtml")

    <div id="chassis" class="card equipment-card">
        <h3 class="card-title">@Html.LabelFor(m => m.Chassis)</h3>
        @await Html.PartialAsync("Partials/_ChassisPartial", Model.Chassis)
    </div>

    <div id="location" class="card equipment-card">
        <h3 class="card-title">@Html.LabelFor(m => m.Location)</h3>
        @await Html.PartialAsync("Partials/_LocationPartial", Model.Location)
    </div>

    <div id="engine" class="card equipment-card">
        <h3 class="card-title">@Html.LabelFor(m => m.Engine)</h3>
        @await Html.PartialAsync("Partials/_EnginePartial", Model.Engine)
    </div>

    <div id="transmission" class="card equipment-card">
        <h3 class="card-title">@Html.LabelFor(m => m.Transmission)</h3>
        @await Html.PartialAsync("Partials/_TransmissionPartial", Model.Transmission)
       
    </div>

    <div id="wheels" class="card equipment-card">
        <h3 class="card-title">@Html.LabelFor(m => m.Wheels)</h3>
        @await Html.PartialAsync("Partials/_WheelPartial", Model.Wheels)
    </div>

    <div id="otherParts" class="card equipment-card">
        <h3 class="card-title">@Html.LabelFor(m => m.Parts)</h3>
        @await Html.PartialAsync("Partials/_PartPartial", Model.Parts)
    </div>

    <div id="workers" class="card equipment-card">
        <h3 class="card-title">@Html.LabelFor(m => m.Workers)</h3>
        @await Html.PartialAsync("Partials/_WorkerPartial", Model.Workers)
    </div>

    <div id="notes" class="card equipment-card">
        <h3 class="card-title">@Html.LabelFor(m => m.Notes)</h3>
        @await Html.PartialAsync("Partials/_NotePartial", Model.Notes)
    </div>

</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
    $(document).ready(function () {

        $('.btn-primary').click(function () {
            var modalId = $(this).data('target'); // Get modal ID
            var contentId = $(this).data('modelId'); // Get content ID

            console.log('here in the click', $(this).data());

            var content = getContent(contentId); 
            

            // Update modal content
            updateModalContent(modalId, content);
        });

        function getContent(contentId) {


            switch (contentId) {
                case 'location':
                    var locationModel = $('#locationModel').val();
                    return createCoreViewModel(locationModel, 0);

                case 'chassis':
                    var chassisModel = $('#chassisModel').val();
                    return createCoreViewModel(chassisModel, 0);

                case 'engine':
                    var engineModel = $('#engineModel').val();
                    return createCoreViewModel(engineModel, 0);

                case 'transmission':
                    var transmissionModel = $('#transmissionModel').val();
                    return createCoreViewModel(transmissionModel, 0);

                case 'part':
                    var partModel = $('#partModel').val();
                    return createCoreViewModel(partModel, 0);

                case 'wheel':
                    var wheelModel = $('#wheelModel').val();
                    return createCoreViewModel(wheelModel, 0);

                case 'worker':
                    var workerModel = $('#workerModel').val();
                    return createCoreViewModel(workerModel, 0);

                case 'note':
                    var noteModel = $('#noteModel').val();
                    return createCoreViewModel(noteModel, 0);

                default:
                    return '';
            }

        }

        function createCoreViewModel(baseModel, id) {
            return {
                BaseModel: baseModel,
                Id: id
            };
        }

        function updateModalContent(modalId, content) {
            var modalBody = $(modalId).find('.modal-body');
            console.log('here is the base model', content.BaseModel);
            var baseModel = JSON.parse(content.BaseModel);

            // Clear existing form fields
            modalBody.empty();

            // Create new form fields based on the model properties
            for (var propertyName in baseModel) {
                console.log('prop name i guess', propertyName);
                if (baseModel.hasOwnProperty(propertyName)) {
                    var propertyValue = baseModel[propertyName];
                    console.log('in the for loop', propertyValue);

                    var formGroup = $('<div>').addClass('form-group');
                    var label = $('<label>').text(propertyName);
                    var input = $('<input>').attr({
                        type: 'text',
                        name: propertyName,
                        value: propertyValue,
                        class: 'form-control'
                    });
                    var validationSpan = $('<span>').addClass('text-danger').attr('asp-validation-for', propertyName);

                    formGroup.append(label, input, validationSpan);
                    modalBody.append(formGroup);
                }
            }

            // Add submit button
            var submitButton = $('<button>').attr({
                type: 'submit',
                class: 'btn btn-primary'
            }).text('Create');
            modalBody.append(submitButton);
        }
    });
    
</script>
