@using Microsoft.AspNetCore.Mvc.Rendering
@inject IHtmlHelper<TractorTracker.Web.Models.BaseModels.Transmission> Html


@model TractorTracker.Web.Models.BaseModels.Transmission

@if (Model != null)
{
    <ul>
        <li>@Html.LabelFor(m => m.SerialNumber) @Model.SerialNumber</li>
        <li>@Html.LabelFor(m => m.Name) @Model.Name</li>
        <li>@Html.LabelFor(m => m.Type) @Model.Type</li>
        <li>@Html.LabelFor(m => m.LastFluidChange) @Model.LastFluidChange</li>
        <li>@Html.LabelFor(m => m.LastFilterChange) @Model.LastFilterChange</li>
    </ul>
    @await Html.PartialAsync("~/Views/Equipment/Generics/CreateModal.cshtml", new CoreViewModel<TractorTracker.Web.Models.Interfaces.IBaseInterface>
{
    BaseModel = Model,
    Id = 0
})
    <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#myModal" data-itemid="transmission" data-model-id="updateTransmission">
        Update Transmission
    </button>
}
else
{
    @await Html.PartialAsync("~/Views/Equipment/Generics/CreateModal.cshtml", new CoreViewModel<TractorTracker.Web.Models.Interfaces.IBaseInterface>
{
    BaseModel = new TractorTracker.Web.Models.BaseModels.Transmission(),
    Id = 0
})
    <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#myModal" data-itemid="transmission" data-model-id="addTransmission">
        Add Transmission
    </button>

}
