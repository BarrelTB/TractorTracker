@using Microsoft.AspNetCore.Mvc.Rendering
@inject IHtmlHelper<TractorTracker.Web.Models.BaseModels.Engine> Html

@model TractorTracker.Web.Models.BaseModels.Engine

@if (Model != null)
{
    <ul>
        <li>@Html.LabelFor(m => m.SerialNumber) @Model.SerialNumber</li>
        <li>@Html.LabelFor(m => m.Type) @Model.Type</li>
        <li>@Html.LabelFor(m => m.Weight) @Model.Weight</li>
        <li>@Html.LabelFor(m => m.Size) @Model.Size</li>
        <li>@Html.LabelFor(m => m.HorsePower) @Model.HorsePower</li>
        <li>@Html.LabelFor(m => m.NumberOfCylinders) @Model.NumberOfCylinders</li>
        <li>@Html.LabelFor(m => m.Fuel) @Model.Fuel</li>
        <li>@Html.LabelFor(m => m.OilType) @Model.OilType</li>
        <li>@Html.LabelFor(m => m.LastOilChange) @Model.LastOilChange</li>
        <li>@Html.LabelFor(m => m.LastFilterChange) @Model.LastFilterChange</li>
    </ul>

    @await Html.PartialAsync("~/Views/Equipment/Generics/CreateModal.cshtml", new CoreViewModel<TractorTracker.Web.Models.Interfaces.IBaseInterface>
{
    BaseModel = Model,
    Id = 0
})
    <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#myModal" data-itemid="engine" data-model-id="@Model.SerialNumber">
        Update Engine
    </button>
}
else
{
    @await Html.PartialAsync("~/Views/Equipment/Generics/CreateModal.cshtml", new CoreViewModel<TractorTracker.Web.Models.Interfaces.IBaseInterface>
{
    BaseModel = new TractorTracker.Web.Models.BaseModels.Engine(),
    Id = 0
})
    <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#myModal" data-itemid="engine" data-model-id="newEngine">
        Add Engine
    </button>

}
