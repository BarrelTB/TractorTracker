@using Microsoft.AspNetCore.Mvc.Rendering
@inject IHtmlHelper<TractorTracker.Web.Models.BaseModels.Location> Html

@model TractorTracker.Web.Models.BaseModels.Location


@if (Model != null)
{  
    <ul>
        <li>@Html.LabelFor(m => m.FieldIdentifier) @Model.FieldIdentifier</li>
        <li>@Html.LabelFor(m => m.FieldName) @Model.FieldName</li>
        <li>@Html.LabelFor(m => m.LatLocation) @Model.LatLocation</li>
        <li>@Html.LabelFor(m => m.LongLocation) @Model.LongLocation</li>
    </ul>
    @await Html.PartialAsync("~/Views/Equipment/Generics/CreateModal.cshtml", new CoreViewModel<TractorTracker.Web.Models.Interfaces.IBaseInterface>
{
    BaseModel = new TractorTracker.Web.Models.BaseModels.Location(),
    Id = 0
})
    <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#myModal" data-itemid="location" data-model-id="updateLocation">
        Update Location
    </button>
}
else
{
    @await Html.PartialAsync("~/Views/Equipment/Generics/CreateModal.cshtml", new CoreViewModel<TractorTracker.Web.Models.Interfaces.IBaseInterface>
{
    BaseModel = new TractorTracker.Web.Models.BaseModels.Location(),
    Id = 0
})
    <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#myModal" data-itemid="location" data-model-id="addLocation">
        Add Location
    </button>

}
