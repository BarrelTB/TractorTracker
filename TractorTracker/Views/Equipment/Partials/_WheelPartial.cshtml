@using Microsoft.AspNetCore.Mvc.Rendering
@inject IHtmlHelper<List<TractorTracker.Web.Models.BaseModels.Wheel>> Html

@model List<TractorTracker.Web.Models.BaseModels.Wheel>

@if (Model != null && Model.Count > 0)
{
    @foreach (var wheel in Model)
    {
        <div id="soloWheel">
            <ul>
                <li>@Html.LabelFor(m => m.FirstOrDefault().Brand) @wheel.Brand</li>
                <li>@Html.LabelFor(m => m.FirstOrDefault().BrakeRating) @wheel.BrakeRating</li>
                <li>@Html.LabelFor(m => m.FirstOrDefault().LastBrakeChange) @wheel.LastBrakeChange</li>
            </ul>
            <div id="soloRim">
                @await Html.PartialAsync("_RimPartial", wheel.Rim)
            </div>
            <div id="soloTire">
                @await Html.PartialAsync("_TirePartial", wheel.Tire)
            </div>

            @await Html.PartialAsync("~/Views/Equipment/Generics/CreateModal.cshtml", new CoreViewModel<TractorTracker.Web.Models.Interfaces.IBaseInterface>
{
    BaseModel = wheel,
    Id = 0
})
            <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#myModal" data-itemid="wheel" data-model-id="updateWheel">
                Update Wheel
            </button>

        </div>

    }

}
@await Html.PartialAsync("~/Views/Equipment/Generics/CreateModal.cshtml", new CoreViewModel<TractorTracker.Web.Models.Interfaces.IBaseInterface>
{
    BaseModel = new TractorTracker.Web.Models.BaseModels.Wheel(),
    Id = 0
})
<button type="button" class="btn btn-primary" data-toggle="modal" data-target="#myModal" data-itemid="wheel" data-model-id="addWheel">
    Add Wheel
</button>

